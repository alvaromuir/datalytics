// Generated by CoffeeScript 1.7.1
(function() {
  var app_url, assert, chai, dataStore, db, dotenv, env, expect, factories, factory_array, request, should, tools, _;

  dotenv = require('dotenv');

  chai = require('chai');

  request = require('request');

  _ = require('lodash');

  tools = require('../tools');

  dataStore = require('../ds');

  db = dataStore.models();

  should = chai.should();

  expect = chai.expect;

  assert = chai.assert;

  dotenv.load();

  env = {
    app_host: process.env.app_host || '0.0.0.0',
    app_port: parseInt(process.env.app_port || 3000),
    app_name: process.env.app_name,
    db_host: process.env.db_host || 'localhost',
    db_name: process.env.db_name,
    db_port: parseInt(process.env.db_port || 27017)
  };

  dataStore.init(env.db_host, env.db_name, env.db_port);

  app_url = 'http://' + env.app_host + ':' + env.app_port;

  factory_array = tools.loadModules(__dirname + '/factories');

  factories = {};

  _.each(factory_array, function(factory, index) {
    return factories[index.split('_')[0].toLowerCase()] = factory;
  });

  describe('The application server', function() {
    before(function(done) {
      return request(app_url, function(err, res, data) {
        var app;
        if (!err && res.statusCode === 200) {
          return done();
        } else {
          app = require('../server');
          return done();
        }
      });
    });
    return describe('has placement routes that', function() {
      var test_plcmnt;
      test_plcmnt = {};
      before(function(done) {
        var p1;
        p1 = new db.Placements(factories.placement);
        p1.save(function(err, doc) {
          if (err) {
            throw err;
          }
          return _.extend(test_plcmnt, doc._doc);
        });
        return done();
      });
      after(function(done) {
        db.Placements.findByIdAndRemove(test_plcmnt._id, function(err, rcrd) {
          if (err) {
            throw err;
          }
        });
        return done();
      });
      it('gets all placements', function(done) {
        var test_url;
        test_url = app_url + '/api/placements';
        return request(test_url, function(err, res, data) {
          var body;
          expect(res.statusCode).to.not.equal(404);
          if (!err && res.statusCode === 200) {
            body = JSON.parse(data);
            expect(body.placement).to.equal('all');
          }
          return done();
        });
      });
      it('can get a single placement by ID', function(done) {
        var test_url;
        test_url = app_url + '/api/placements/id/' + test_plcmnt._id;
        return request(test_url, function(err, res, data) {
          var body;
          expect(res.statusCode).to.not.equal(404);
          if (!err && res.statusCode === 200) {
            body = JSON.parse(data);
            expect(body._id).to.equal(test_plcmnt._id.toString());
          }
          return done();
        });
      });
      it('gets all placements by placement name', function(done) {
        var test_url;
        test_url = app_url + '/api/placements/' + encodeURIComponent(test_plcmnt['Placement']);
        return request(test_url, function(err, res, data) {
          var body;
          expect(res.statusCode).to.not.equal(404);
          if (!err && res.statusCode === 200) {
            body = JSON.parse(data);
            expect(body.placement).to.equal(test_plcmnt['Placement']);
          }
          return done();
        });
      });
      it('gets a list of all campaigns', function(done) {
        var criteria, test_url;
        criteria = 'campaigns';
        test_url = app_url + '/api/' + criteria;
        return request(test_url, function(err, res, data) {
          var body;
          expect(res.statusCode).to.not.equal(404);
          if (!err && res.statusCode === 200) {
            body = JSON.parse(data);
            expect(_.contains(body[criteria], test_plcmnt['Campaign'])).to.equal(true);
          }
          return done();
        });
      });
      it('gets campaigns by campaign name', function(done) {
        var criteria, test_url;
        criteria = 'campaigns';
        test_url = app_url + '/api/' + criteria + '/' + encodeURIComponent(test_plcmnt['Campaign']);
        return request(test_url, function(err, res, data) {
          var body;
          expect(res.statusCode).to.not.equal(404);
          if (!err && res.statusCode === 200) {
            body = JSON.parse(data);
            expect(body[criteria]).to.equal(test_plcmnt[criteria]);
          }
          return done();
        });
      });
      it('gets a list of all sites', function(done) {
        var criteria, test_url;
        criteria = 'sites';
        test_url = app_url + '/api/' + criteria;
        return request(test_url, function(err, res, data) {
          var body;
          expect(res.statusCode).to.not.equal(404);
          if (!err && res.statusCode === 200) {
            body = JSON.parse(data);
            expect(_.contains(body[criteria], test_plcmnt['Site (DFA)'])).to.equal(true);
          }
          return done();
        });
      });
      it('gets all placements by site name', function(done) {
        var criteria, criteria_name, test_url;
        criteria = 'sites';
        criteria_name = 'Site (DFA)';
        test_url = app_url + '/api/' + criteria + '/' + encodeURIComponent(test_plcmnt[criteria_name]);
        return request(test_url, function(err, res, data) {
          var body;
          expect(res.statusCode).to.not.equal(404);
          if (!err && res.statusCode === 200) {
            body = JSON.parse(data);
            expect(body[tools.singularize(criteria)]).to.equal(test_plcmnt[criteria_name]);
          }
          return done();
        });
      });
      it('gets a list of all groups', function(done) {
        var criteria, criteria_key, criteria_name, test_url;
        criteria = 'groups';
        criteria_name = 'Placement ' + tools.capitalize(criteria);
        criteria_key = tools.singularize(criteria_name);
        test_url = app_url + '/api/' + criteria;
        return request(test_url, function(err, res, data) {
          var body;
          expect(res.statusCode).to.not.equal(404);
          if (!err && res.statusCode === 200) {
            body = JSON.parse(data);
            expect(_.contains(body[criteria_name.toLowerCase()], test_plcmnt[criteria_key])).to.equal(true);
          }
          return done();
        });
      });
      it('gets all placements by group name', function(done) {
        var criteria, criteria_key, criteria_name, test_url;
        criteria = 'groups';
        criteria_name = 'Placement ' + tools.capitalize(criteria);
        criteria_key = tools.singularize(criteria_name);
        test_url = app_url + '/api/' + criteria + '/' + encodeURIComponent(test_plcmnt[criteria_key]);
        return request(test_url, function(err, res, data) {
          var body;
          expect(res.statusCode).to.not.equal(404);
          if (!err && res.statusCode === 200) {
            body = JSON.parse(data);
            expect(body[tools.singularize(criteria)]).to.equal(test_plcmnt[criteria_key]);
          }
          return done();
        });
      });
      it('gets a list of all tactics', function(done) {
        var criteria, criteria_key, criteria_name, test_url;
        criteria = 'tactics';
        criteria_name = 'Placement ' + tools.capitalize(criteria);
        criteria_key = tools.singularize(criteria_name);
        test_url = app_url + '/api/' + criteria;
        return request(test_url, function(err, res, data) {
          var body;
          expect(res.statusCode).to.not.equal(404);
          if (!err && res.statusCode === 200) {
            body = JSON.parse(data);
            expect(_.contains(body[criteria_name.toLowerCase()], test_plcmnt[criteria_key])).to.equal(true);
          }
          return done();
        });
      });
      it('gets all placements by tactic name', function(done) {
        var criteria, criteria_key, criteria_name, test_url;
        criteria = 'tactics';
        criteria_name = 'Placement ' + tools.capitalize(criteria);
        criteria_key = tools.singularize(criteria_name);
        test_url = app_url + '/api/' + criteria + '/' + encodeURIComponent(test_plcmnt[criteria_key]);
        return request(test_url, function(err, res, data) {
          var body;
          expect(res.statusCode).to.not.equal(404);
          if (!err && res.statusCode === 200) {
            body = JSON.parse(data);
            expect(body[tools.singularize(criteria)]).to.equal(test_plcmnt[criteria_key]);
          }
          return done();
        });
      });
      it('gets a list of all segments', function(done) {
        var criteria, criteria_key, test_url;
        criteria = 'segments';
        criteria_key = 'DMP Segment';
        test_url = app_url + '/api/' + criteria;
        return request(test_url, function(err, res, data) {
          var body;
          expect(res.statusCode).to.not.equal(404);
          if (!err && res.statusCode === 200) {
            body = JSON.parse(data);
            expect(_.contains(body[criteria_key.toLowerCase() + 's'], test_plcmnt[criteria_key])).to.equal(true);
          }
          return done();
        });
      });
      it('gets all placements by segment name', function(done) {
        var criteria, criteria_key, test_url;
        criteria = 'segments';
        criteria_key = 'DMP Segment';
        test_url = app_url + '/api/' + criteria + '/' + encodeURIComponent(test_plcmnt[criteria_key]);
        return request(test_url, function(err, res, data) {
          var body;
          expect(res.statusCode).to.not.equal(404);
          if (!err && res.statusCode === 200) {
            body = JSON.parse(data);
            expect(body[tools.singularize(criteria)]).to.equal(test_plcmnt[criteria_key]);
          }
          return done();
        });
      });
      it('gets a list of all months', function(done) {
        var criteria, criteria_key, test_url;
        criteria = 'months';
        criteria_key = 'Month';
        test_url = app_url + '/api/' + criteria;
        return request(test_url, function(err, res, data) {
          var body;
          expect(res.statusCode).to.not.equal(404);
          if (!err && res.statusCode === 200) {
            body = JSON.parse(data);
            expect(_.contains(body[criteria], test_plcmnt[criteria_key])).to.equal(true);
          }
          return done();
        });
      });
      return it('gets all placements by month', function(done) {
        var criteria, criteria_key, test_url;
        criteria = 'months';
        criteria_key = 'Month';
        test_url = app_url + '/api/' + criteria + '/' + encodeURIComponent(test_plcmnt[criteria_key]);
        return request(test_url, function(err, res, data) {
          var body;
          expect(res.statusCode).to.not.equal(404);
          if (!err && res.statusCode === 200) {
            body = JSON.parse(data);
            expect(body[tools.singularize(criteria)]).to.equal(test_plcmnt[criteria_key]);
          }
          return done();
        });
      });
    });
  });

}).call(this);
