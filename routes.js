// Generated by CoffeeScript 1.7.1
(function() {
  var dataStore, rsltsObj;

  dataStore = require('./ds');

  rsltsObj = function(rcrds, category, criteria) {
    var rcrd, rslts, _i, _len;
    rslts = {};
    rslts[category] = criteria;
    rslts['placement count'] = rcrds.length;
    rslts['Impressions'] = 0;
    rslts['Clicks'] = 0;
    rslts['CT TV LQS'] = 0;
    rslts['VT TV LQS'] = 0;
    rslts['TV LQS'] = 0;
    rslts['Internet Orders'] = 0;
    rslts['TV Orders'] = 0;
    for (_i = 0, _len = rcrds.length; _i < _len; _i++) {
      rcrd = rcrds[_i];
      if (!isNaN(rcrd['Impressions'])) {
        rslts['Impressions'] += rcrd['Impressions'];
      }
      if (!isNaN(rcrd['Clicks'])) {
        rslts['Clicks'] += rcrd['Clicks'];
      }
      if (!isNaN(rcrd['CT TV LQS'])) {
        rslts['CT TV LQS'] += rcrd['CT TV LQS'];
      }
      if (!isNaN(rcrd['VT TV LQS'])) {
        rslts['VT TV LQS'] += rcrd['VT TV LQS'];
      }
      if (!isNaN(rcrd._doc['TV LQS'])) {
        rslts['TV LQS'] += rcrd._doc['TV LQS'];
      }
      if (!isNaN(rcrd['Internet Orders'])) {
        rslts['Internet Orders'] += rcrd['Internet Orders'];
      }
      if (!isNaN(rcrd['TV Orders'])) {
        rslts['TV Orders'] += rcrd['TV Orders'];
      }
    }
    rslts['Total Orders'] = rslts['Internet Orders'] + rslts['TV Orders'];
    rslts['placements'] = rcrds;
    return rslts;
  };

  module.exports = function(server, db_host, db_name, db_port) {
    var db;
    dataStore.init(db_host, db_name, db_port);
    db = dataStore.models();
    server.get('/hello/:name', function(req, res, next) {
      res.send({
        hello: req.params.name,
        date: new Date
      });
      return next();
    });
    server.get('/', function(req, res, next) {
      var resObj;
      resObj = {
        sever: process.env.app_name,
        remote: req.connection.remoteAddress,
        date: new Date,
        msg: 'for more info, try @alvaromuir'
      };
      res.send(resObj);
      return next();
    });
    server.get('/api/placements/', function(req, res, next) {
      return db.Placements.find(function(err, rcrds) {
        var rslts;
        if (err) {
          return err;
        }
        rslts = rsltsObj(rcrds, 'placement', 'all');
        res.send(rslts);
        return next();
      });
    });
    server.get('/api/placements/id/:id', function(req, res, next) {
      return db.Placements.findById(req.params.id, function(err, doc) {
        if (err) {
          return err;
        }
        if (doc) {
          res.send(doc);
          return next();
        } else {
          res.send({
            error: 'record with id ' + req.params.id + ' not found'
          });
          return next();
        }
      });
    });
    server.get('/api/placements/:placement', function(req, res, next) {
      return db.Placements.find({
        'Placement': req.params.placement
      }, function(err, rcrds) {
        var rslts;
        if (err) {
          return err;
        }
        rslts = rsltsObj(rcrds, 'placement', req.params.placement);
        res.send(rslts);
        return next();
      });
    });
    server.get('/api/campaigns', function(req, res, next) {
      return db.Placements.distinct('Campaign', function(err, rslts) {
        var count;
        if (err) {
          return err;
        }
        count = rslts.length;
        res.send({
          'total campaigns': count,
          campaigns: rslts
        });
        return next();
      });
    });
    server.get('/api/campaigns/:campaign', function(req, res, next) {
      return db.Placements.find({
        Campaign: req.params.campaign
      }, function(err, rcrds) {
        var rslts;
        if (err) {
          return err;
        }
        rslts = rsltsObj(rcrds, 'campaign', req.params.campaign);
        res.send(rslts);
        return next();
      });
    });
    server.get('/api/sites', function(req, res, next) {
      return db.Placements.distinct('Site (DFA)', function(err, rslts) {
        var count;
        if (err) {
          return err;
        }
        count = rslts.length;
        res.send({
          'total sites': count,
          sites: rslts
        });
        return next();
      });
    });
    server.get('/api/sites/:site', function(req, res, next) {
      return db.Placements.find({
        'Site (DFA)': req.params.site
      }, function(err, rcrds) {
        var rslts;
        if (err) {
          return err;
        }
        rslts = rsltsObj(rcrds, 'site', req.params.site);
        res.send(rslts);
        return next();
      });
    });
    server.get('/api/groups', function(req, res, next) {
      return db.Placements.distinct('Placement Group', function(err, rslts) {
        var count;
        if (err) {
          return err;
        }
        count = rslts.length;
        res.send({
          'total groups': count,
          'placement groups': rslts
        });
        return next();
      });
    });
    server.get('/api/groups/:group', function(req, res, next) {
      return db.Placements.find({
        'Placement Group': req.params.group
      }, function(err, rcrds) {
        var rslts;
        if (err) {
          return err;
        }
        rslts = rsltsObj(rcrds, 'group', req.params.group);
        res.send(rslts);
        return next();
      });
    });
    server.get('/api/tactics', function(req, res, next) {
      return db.Placements.distinct('Placement Tactic', function(err, rslts) {
        var count;
        if (err) {
          return err;
        }
        count = rslts.length;
        res.send({
          'total tactics': count,
          'placement tactics': rslts
        });
        return next();
      });
    });
    server.get('/api/tactics/:tactic', function(req, res, next) {
      return db.Placements.find({
        'Placement Tactic': req.params.tactic
      }, function(err, rcrds) {
        var rslts;
        if (err) {
          return err;
        }
        rslts = rsltsObj(rcrds, 'tactic', req.params.tactic);
        res.send(rslts);
        return next();
      });
    });
    server.get('/api/segments', function(req, res, next) {
      return db.Placements.distinct('DMP Segment', function(err, rslts) {
        var count;
        if (err) {
          return err;
        }
        count = rslts.length;
        res.send({
          'total segments': count,
          'dmp segments': rslts
        });
        return next();
      });
    });
    server.get('/api/segments/:segment', function(req, res, next) {
      return db.Placements.find({
        'DMP Segment': req.params.segment
      }, function(err, rcrds) {
        var rslts;
        if (err) {
          return err;
        }
        rslts = rsltsObj(rcrds, 'segment', req.params.segment);
        res.send(rslts);
        return next();
      });
    });
    server.get('/api/months', function(req, res, next) {
      return db.Placements.distinct('Month', function(err, rslts) {
        var count;
        if (err) {
          return err;
        }
        count = rslts.length;
        res.send({
          'total months': count,
          'months': rslts
        });
        return next();
      });
    });
    return server.get('/api/months/:month', function(req, res, next) {
      return db.Placements.find({
        'Month': req.params.month
      }, function(err, rcrds) {
        var rslts;
        if (err) {
          return err;
        }
        rslts = rsltsObj(rcrds, 'month', req.params.month);
        res.send(rslts);
        return next();
      });
    });
  };

}).call(this);
