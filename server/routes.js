// Generated by CoffeeScript 1.7.1
(function() {
  var dataStore, rsltsObj, _;

  dataStore = require('./ds');

  _ = require('lodash');

  rsltsObj = function(rcrds, category, criteria) {
    var doc, rcrd, rslts, _i, _len;
    rslts = {};
    rslts[category] = criteria;
    rslts['placement count'] = rcrds.length;
    rslts['MediaCostM'] = 0;
    rslts['ImpsM'] = 0;
    rslts['ClicksM'] = 0;
    rslts['Consumer - Homepage : Learn_Shop_Unique: Click-through Conversions'] = 0;
    rslts['Consumer - Homepage : Learn_Shop_Unique: View-through Conversions'] = 0;
    rslts['Consumer - Remarketing : Loop Qual Success_FiOS TV: Click-through Conversions'] = 0;
    rslts['Consumer - Remarketing : Loop Qual Success_FiOS TV: View-through Conversions'] = 0;
    rslts['Consumer - Remarketing : Loop Qual Success_FiOS Internet: Click-through Conversions'] = 0;
    rslts['Consumer - Remarketing : Loop Qual Success_FiOS Internet: View-through Conversions'] = 0;
    rslts['Consumer - Remarketing : Loop Qual Success_CHSI: Click-through Conversions'] = 0;
    rslts['Consumer - Remarketing : Loop Qual Success_CHSI: View-through Conversions'] = 0;
    rslts['Consumer - Order Confirmation : GO CHSI Order - AM: Click-through Conversions'] = 0;
    rslts['Consumer - Order Confirmation : GO CHSI Order - AM: View-through Conversions'] = 0;
    rslts['Consumer - Order Confirmation : GO CHSI Order - NC: Click-through Conversions'] = 0;
    rslts['Consumer - Order Confirmation : GO CHSI Order - NC: View-through Conversions'] = 0;
    rslts['Consumer - Order Confirmation : GO FiOS Internet Order - AM: Click-through Conversions'] = 0;
    rslts['Consumer - Order Confirmation : GO FiOS Internet Order - AM: View-through Conversions'] = 0;
    rslts['Consumer - Order Confirmation : GO FiOS Internet Order - NC: Click-through Conversions'] = 0;
    rslts['Consumer - Order Confirmation : GO FiOS Internet Order - NC: View-through Conversions'] = 0;
    rslts['Consumer - Order Confirmation : GO FiOS TV Order - AM: Click-through Conversions'] = 0;
    rslts['Consumer - Order Confirmation : GO FiOS TV Order - AM: View-through Conversions'] = 0;
    rslts['Consumer - Order Confirmation : GO FiOS TV Order - NC: Click-through Conversions'] = 0;
    rslts['Consumer - Order Confirmation : GO FiOS TV Order - NC: View-through Conversions'] = 0;
    rslts['Consumer - Homepage : VPM_2013: Click-through Conversions'] = 0;
    rslts['Consumer - Homepage : VPM_2013: View-through Conversions'] = 0;
    rslts['GoodVisitsM'] = 0;
    rslts['CTGoodVisitsM'] = 0;
    rslts['TVLQSm'] = 0;
    rslts['CTTVLQSm'] = 0;
    rslts['Total LQS'] = 0;
    rslts['TVOrdersM'] = 0;
    rslts['CTTVOrdersM'] = 0;
    rslts['Internet Orders'] = 0;
    rslts['CHSI Orders'] = 0;
    rslts['Total Orders'] = 0;
    rslts['Total VisitsM'] = 0;
    for (_i = 0, _len = rcrds.length; _i < _len; _i++) {
      rcrd = rcrds[_i];
      doc = rcrd._doc;
      _.forIn(doc, function(val, key) {
        if (!isNaN(doc[key])) {
          return rslts[key] += parseInt(doc[key]);
        }
      });
    }
    rslts['placements'] = rcrds;
    return rslts;
  };

  module.exports = function(server, db_host, db_name, db_port) {
    var db;
    dataStore.init(db_host, db_name, db_port);
    db = dataStore.models();
    server.get('/hello/:name', function(req, res, next) {
      res.send({
        hello: req.params.name,
        date: new Date
      });
      return next();
    });
    server.get('/', function(req, res, next) {
      var resObj;
      resObj = {
        sever: process.env.app_name,
        remote: req.connection.remoteAddress,
        date: new Date,
        msg: 'for more info, try @alvaromuir'
      };
      res.send(resObj);
      return next();
    });
    server.get('/api/placements/', function(req, res, next) {
      return db.Placements.find(function(err, rcrds) {
        var rslts;
        if (err) {
          return err;
        }
        rslts = _.without(rslts, '');
        rslts = rsltsObj(rcrds, 'placement', 'all');
        res.send(rslts);
        return next();
      });
    });
    server.get('/api/placements/id/:id', function(req, res, next) {
      return db.Placements.findById(req.params.id, function(err, doc) {
        if (err) {
          return err;
        }
        if (doc) {
          res.send(doc);
          return next();
        } else {
          res.send({
            error: 'record with id ' + req.params.id + ' not found'
          });
          return next();
        }
      });
    });
    server.get('/api/placements/:placement', function(req, res, next) {
      return db.Placements.find({
        'Placement': req.params.placement
      }, function(err, rcrds) {
        var rslts;
        if (err) {
          return err;
        }
        rslts = rsltsObj(rcrds, 'placement', req.params.placement);
        res.send(rslts);
        return next();
      });
    });
    server.get('/api/campaigns', function(req, res, next) {
      return db.Placements.distinct('Campaign', function(err, rslts) {
        var count;
        if (err) {
          return err;
        }
        rslts = _.without(rslts, '');
        count = rslts.length;
        res.send({
          'total campaigns': count,
          campaigns: rslts
        });
        return next();
      });
    });
    server.get('/api/campaigns/:campaign', function(req, res, next) {
      return db.Placements.find({
        Campaign: req.params.campaign
      }, function(err, rcrds) {
        var rslts;
        if (err) {
          return err;
        }
        rslts = rsltsObj(rcrds, 'campaign', req.params.campaign);
        res.send(rslts);
        return next();
      });
    });
    server.get('/api/sites', function(req, res, next) {
      return db.Placements.distinct('Site (DFA)', function(err, rslts) {
        var count;
        if (err) {
          return err;
        }
        rslts = _.without(rslts, '');
        count = rslts.length;
        res.send({
          'total sites': count,
          sites: rslts
        });
        return next();
      });
    });
    server.get('/api/sites/:site', function(req, res, next) {
      return db.Placements.find({
        'Site (DFA)': req.params.site
      }, function(err, rcrds) {
        var rslts;
        if (err) {
          return err;
        }
        rslts = rsltsObj(rcrds, 'site', req.params.site);
        res.send(rslts);
        return next();
      });
    });
    server.get('/api/mobile/tablet/tactic', function(req, res, next) {
      return db.Placements.distinct('Mobile/Tablet Tactic', function(err, rslts) {
        var count;
        if (err) {
          return err;
        }
        rslts = _.without(rslts, '');
        count = rslts.length;
        res.send({
          'total mobile/tablic tacitcs': count,
          'mobile/tablic tacitcs': rslts
        });
        return next();
      });
    });
    server.get('/api/mobile/tablet/tactic/:tacic', function(req, res, next) {
      return db.Placements.find({
        'Mobile/Tablet Tactic': req.params.tactic
      }, function(err, rcrds) {
        var rslts;
        if (err) {
          return err;
        }
        rslts = rsltsObj(rcrds, 'mobile/tablic tacitc', req.params.tactic);
        res.send(rslts);
        return next();
      });
    });
    server.get('/api/tactics', function(req, res, next) {
      return db.Placements.distinct('Placement Tactic', function(err, rslts) {
        var count;
        if (err) {
          return err;
        }
        rslts = _.without(rslts, '');
        count = rslts.length;
        res.send({
          'total tactics': count,
          'placement tactics': rslts
        });
        return next();
      });
    });
    server.get('/api/tactics/:tactic', function(req, res, next) {
      return db.Placements.find({
        'Placement Tactic': req.params.tactic
      }, function(err, rcrds) {
        var rslts;
        if (err) {
          return err;
        }
        rslts = rsltsObj(rcrds, 'tactic', req.params.tactic);
        res.send(rslts);
        return next();
      });
    });
    server.get('/api/segments', function(req, res, next) {
      return db.Placements.distinct('DMP Segment', function(err, rslts) {
        var count;
        if (err) {
          return err;
        }
        count = rslts.length;
        res.send({
          'total segments': count,
          'dmp segments': rslts
        });
        return next();
      });
    });
    server.get('/api/segments/:segment', function(req, res, next) {
      return db.Placements.find({
        'DMP Segment': req.params.segment
      }, function(err, rcrds) {
        var rslts;
        if (err) {
          return err;
        }
        rslts = rsltsObj(rcrds, 'segment', req.params.segment);
        res.send(rslts);
        return next();
      });
    });
    server.get('/api/dates', function(req, res, next) {
      return db.Placements.distinct('Date', function(err, rslts) {
        var count;
        if (err) {
          return err;
        }
        rslts = _.without(rslts, '');
        count = rslts.length;
        res.send({
          'total dates': count,
          'dates': rslts
        });
        return next();
      });
    });
    return server.get('/api/dates/:date', function(req, res, next) {
      return db.Placements.find({
        'Date': req.params.date
      }, function(err, rcrds) {
        var rslts;
        if (err) {
          return err;
        }
        rslts = rsltsObj(rcrds, 'date', req.params.date);
        res.send(rslts);
        return next();
      });
    });
  };

}).call(this);
